(define x 6) 
x 
(define cube (lambda (x) (* x x x))) 
(cube x) 
(define getadder (lambda (x) (lambda (y) (+ x y)))) 
(define addfive (getadder 5))
(define addtwo (getadder 2))
(addfive 6)
(addtwo 4)


((lambda (f a) (f f a)) (lambda (f n) (if (> n 1) (* n (f f (- n 1))) 1))  5)

(define while (lambda (cond expr) (if (and (eval cond) (or (eval expr) true)) (while cond expr) nil))) 
(while false '(print 5)) 
(define i 0) 
(while '(< i 10) '(setq i (print (+ i 1)))) 

(define e '(< 1 2)) 
e 
(eval e) 