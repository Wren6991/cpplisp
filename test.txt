(define x 6) 
x 
(define cube (lambda (x) (* x x x))) 
(cube x) 
(define getadder (lambda (x) (lambda (y) (+ x y)))) 
(define addfive (getadder 5))
(define addtwo (getadder 2))
(addfive 6)
(addtwo 4)


((lambda (f a) (f f a)) (lambda (f n) (if (> n 1) (* n (f f (- n 1))) 1))  5)

(define while (lambda (cond expr) (if (and (eval cond) (or (eval expr) true)) (while cond expr) nil))) 
(while false '(print 5)) 
(define i 0) 
(while '(< i 10) '(setq i (print (+ i 1)))) 

(define e '(< 1 2)) 
e 
(eval e) 

(define nil! (macro (var) `(setq ,var nil)))
(nil! x)


(define defmacro (macro (var lis body) `(define ,var (macro ,lis ,body))))
(defmacro add (x y) `(+ ,x ,y))
; ==> (DEFINE ADD (MACRO (X Y) (QUASI-QUOTE (+ (UN-QUOTE X) (UN-QUOTE Y)))))

(defmacro dotimes (n body) `(
 let ((iter-var 0) (upper-limit ,n)) (tagbody top ,body (setq iter-var (+ iter-var 1)) (if
 (< iter-var upper-limit) (go top)) end))
 )
 (defun plot (func min max) (dotimes (+ 1 (- max min)) (begin (dotimes (func (+
min iter-var)) (write "*")) (print ""))))
(plot (lambda (x) (* x x)) (- 0 8) 8)


(defun lol (&rest args) (print args))

(lol ''x ''y ''z)